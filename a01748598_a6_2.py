# -*- coding: utf-8 -*-
"""A01748598_A6.2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gevqiEQtYG7k793l2v1FFPH5fURYZ671
"""

from google.colab import drive
drive.mount('/content/drive')

import unittest
import json
import os
from typing import List, Dict

save_path = '/content/drive/MyDrive/Colab Notebooks/Pruebas de SW y Calidad/Tarea 6.2'
os.makedirs(save_path, exist_ok=True)

test_hotels = os.path.join(save_path, 'hotels.json')
test_customers = os.path.join(save_path, 'customers.json')

with open(test_hotels, 'w') as hotel_file:
    json.dump([
        {"hotel_id": 1, "name": "Hotel Mayan", "location": "Vallarta", "rooms": 2},
        {"hotel_id": 2, "name": "Hotel HolidayInn", "location": "Guanajuato", "rooms": 3}
    ], hotel_file)

with open(test_customers, 'w') as customer_file:
    json.dump([
        {"customer_id": 1, "name": "Amiel", "email": "amiel@gmail.com"},
        {"customer_id": 2, "name": "Joel", "email": "joel@hotmail.com"}
    ], customer_file)

class Hotel:
    def __init__(self, hotel_id: int, name: str, location: str, rooms: int):
        self.hotel_id = hotel_id
        self.name = name
        self.location = location
        self.rooms = rooms
        self.reservations = {}

    def reserve_room(self, reservation_id: int, customer_id: int) -> bool:
        if len(self.reservations) < self.rooms:
            self.reservations[reservation_id] = customer_id
            return True
        return False

    def cancel_reservation(self, reservation_id: int) -> bool:
        if reservation_id in self.reservations:
            del self.reservations[reservation_id]
            return True
        return False

class Customer:
    def __init__(self, customer_id: int, name: str, email: str):
        self.customer_id = customer_id
        self.name = name
        self.email = email

class Reservation:
    def __init__(self, reservation_id: int, hotel: Hotel, customer: Customer):
        if not isinstance(hotel, Hotel) or not isinstance(customer, Customer):
            raise TypeError("hotel y customer deben ser instancias vÃ¡lidas de Hotel y Customer")

        self.reservation_id = reservation_id
        self.hotel = hotel
        self.customer = customer

        if not hotel.reserve_room(reservation_id, customer.customer_id):
            raise ValueError("No rooms available")

    def __str__(self) -> str:
        return f"Reserva {self.reservation_id}: Hotel {self.hotel.name}, Cliente {self.customer.name}"

class TestReservationSystem(unittest.TestCase):
    def setUp(self):
        self.hotel = Hotel(1, "Hotel Mayan", "Vallarta", 2)
        self.customer1 = Customer(1, "Amiel", "amiel@gmail.com")
        self.customer2 = Customer(2, "Joel", "joel@hotmail.com")
        self.customer3 = Customer(3, "Rosete", "rosete@hotmail.com")

    def test_invalid_instances(self):
        with self.assertRaises(TypeError):
            Reservation(1, "InvalidHotel", self.customer1)
        with self.assertRaises(TypeError):
            Reservation(1, self.hotel, "InvalidCustomer")

    def test_reserve_successful(self):
        reservation = Reservation(1, self.hotel, self.customer1)
        self.assertIn(1, self.hotel.reservations)

    def test_reserve_when_full(self):
        Reservation(1, self.hotel, self.customer1)
        Reservation(2, self.hotel, self.customer2)
        with self.assertRaises(ValueError):
            Reservation(3, self.hotel, self.customer3)

    def test_cancel_reservation_successful(self):
        reservation = Reservation(1, self.hotel, self.customer1)
        self.assertTrue(self.hotel.cancel_reservation(1))
        self.assertNotIn(1, self.hotel.reservations)

    def test_cancel_nonexistent_reservation(self):
        self.assertFalse(self.hotel.cancel_reservation(99))

summary_file = os.path.join(save_path, 'resumen.txt')

test_system = TestReservationSystem()
test_system.setUp()

with open(summary_file, 'w') as resumen_file:
    resumen_file.write("Resumen actualizado con validaciones de instancias y funcionalidad de reservas:\n")
    resumen_file.write(f"Cliente: {test_system.customer1.name} - Email: {test_system.customer1.email}\n")
    print(f"Archivos generados en: {save_path}")

if __name__ == "__main__":
    unittest.main(argv=['first-arg-is-ignored'], exit=False)

pip install flake8

!python "/content/drive/MyDrive/Colab Notebooks/Pruebas de SW y Calidad/Tarea 6.2/A01748598_A6.2.ipynb"

!flake8 "/content/drive/MyDrive/Colab Notebooks/Pruebas de SW y Calidad/Tarea 6.2/A01748598_A6.2.ipynb" "/content/drive/MyDrive/Colab Notebooks/Pruebas de SW y Calidad/Tarea 6.2/customers.json" "/content/drive/MyDrive/Colab Notebooks/Pruebas de SW y Calidad/Tarea 6.2/hotels.json"